#![allow(clippy::unused_unit)] // TODO: remove after bumping wasm-bindgen version

mod fmt;

use fmt::rust_fmt;
use js_sys::encode_uri_component;
use monaco::{
    api::CodeEditorOptions,
    sys::editor::{BuiltinTheme, IStandaloneCodeEditor},
    yew::{CodeEditor, CodeEditorLink},
};
use std::rc::Rc;
use ts_bindgen::generate_rust_string_for_typescript_string;
use wasm_bindgen::prelude::*;
use web_sys::window;
use yew::{html, Component, Context, Html};

const VERSION: &str = env!("CARGO_PKG_VERSION");

fn code_prefix() -> String {
    // TODO: keep this in sync with main README.md
    format!(
        r#"// Add the following dependency to your Cargo.toml
// to use these bindings:
//
// [dependencies]
// ts-bindgen-rt = "{}"
// wasm-bindgen = "0.2.87"
// serde = {{ version = "1.0", features = ["derive"] }}
// js-sys = "0.3.64" # optional, depending on your typescript
// web-sys = {{ version = "0.3.64", features = ["Window"] }} # optional, update with features for any types your bindings use
//
// Generated by ts-bindgen, a Ratchet Designs utility.
// Generator available at: https://ts-bindgen.ratchetdesigns.com
"#,
        VERSION,
    )
}

fn get_options(lang: &str) -> CodeEditorOptions {
    let opts = CodeEditorOptions::default()
        .with_language(lang.to_owned())
        .with_builtin_theme(BuiltinTheme::VsDark);
    if lang == "typescript" {
        opts.with_value(r#"type MyType = number | string | null;"#.to_owned())
    } else {
        opts
    }
}

struct App {
    ts_options: Rc<CodeEditorOptions>,
    ts_link: CodeEditorLink,
    rust_options: Rc<CodeEditorOptions>,
    rust_link: CodeEditorLink,
}

enum Msg {
    Generate,
    CreateIssue,
}

fn set_auto_layout(editor: &CodeEditorLink) {
    editor.with_editor(|model| {
        let editor: &IStandaloneCodeEditor = model.as_ref();
        let opts = editor.get_raw_options();
        opts.set_automatic_layout(Some(true));
        editor.update_options_editor(&opts);
    });
}

impl Component for App {
    type Message = Msg;
    type Properties = ();

    fn create(_ctx: &Context<Self>) -> Self {
        Self {
            ts_options: Rc::new(get_options("typescript")),
            ts_link: Default::default(),
            rust_options: Rc::new(get_options("rust")),
            rust_link: Default::default(),
        }
    }

    fn update(&mut self, _ctx: &Context<Self>, msg: Self::Message) -> bool {
        match msg {
            Msg::Generate => {
                self.ts_link.with_editor(|model| {
                    let ts = model
                        .get_model()
                        .map(|m| m.get_value())
                        .unwrap_or_else(|| String::from(""));
                    let rust = generate_rust_string_for_typescript_string("example", ts)
                        .map_err(|err| Box::new(err) as Box<dyn std::error::Error + 'static>)
                        .and_then(rust_fmt)
                        .map(|rust| format!("{}\n{}", code_prefix(), rust))
                        .unwrap_or_else(|err| {
                            format!("// Error generating typescript rust bindings.\n{}", err)
                        });
                    self.rust_link.with_editor(|rs_model| {
                        if let Some(m) = rs_model.get_model() {
                            m.set_value(&rust);
                        }
                    });
                });
            }
            Msg::CreateIssue => {
                self.ts_link.with_editor(|model| {
                    let ts = model
                        .get_model()
                        .map(|m| m.get_value())
                        .unwrap_or_else(|| String::from(""));
                    let ts = if ts.len() > 1900 {
                        "ENTER CODE HERE".to_string()
                    } else {
                        ts
                    };
                    let body_param = format!("Issue generating bindings.\n\nVersion: {}\n\nExpected: {{description}}\n\nObserved: {{description}}\n\nCode:\n```\n{}\n```", VERSION, ts);
                    let encoded_body: String = encode_uri_component(&body_param).into();
                    let encoded_url = format!("https://github.com/ratchetdesigns/ts-bindgen/issues/new?title=ts-bindgen+binding+generation+issue&body={}", encoded_body);
                    window().expect("window").open_with_url_and_target(&encoded_url, "_blank")

                });
            }
        }
        false
    }

    fn rendered(&mut self, _ctx: &Context<Self>, first_render: bool) {
        if first_render {
            set_auto_layout(&self.ts_link);
            set_auto_layout(&self.rust_link);
        }
    }

    fn view(&self, ctx: &Context<Self>) -> Html {
        let on_generate = ctx.link().callback(|_| Msg::Generate);
        let on_issue = ctx.link().callback(|_| Msg::CreateIssue);

        html! {
            <>
                <div class="top-bar">
                    <div class="header">
                        <a class="header-logo" href="https://ratchetdesigns.com">
                            <img alt="Ratchet Designs" src="logo.png" />
                        </a>
                        <a href="https://crates.io/crates/ts-bindgen">
                            <img src="https://img.shields.io/crates/v/ts-bindgen.svg" alt="ts-bindgen crate" style="max-width: 100%;" />
                        </a>
                        <a href="https://docs.rs/ts-bindgen">
                            <img src="https://docs.rs/ts-bindgen/badge.svg" alt="Rust Docuemntation" style="max-width: 100%;" />
                        </a>
                        <a href="https://github.com/ratchetdesigns/ts-bindgen/actions/workflows/ci.yml">
                            <img src="https://github.com/ratchetdesigns/ts-bindgen/actions/workflows/ci.yml/badge.svg" alt="CI" style="max-width: 100%;" />
                        </a>
                        <a href="https://github.com/ratchetdesigns/ts-bindgen">
                            <img alt="Crates.io" src="https://img.shields.io/crates/l/ts-bindgen" style="max-width: 100%;" />
                        </a>
                        <a href="https://github.com/ratchetdesigns/ts-bindgen">
                            <img src="https://img.shields.io/github/stars/ratchetdesigns/ts-bindgen?style=social" alt="ts-bindgen github" style="max-width: 100%;" />
                        </a>
                    </div>
                    <div class="subheader">
                        <span class="subheader-dropcap">{"//"}</span>
                        <a href="https://github.com/ratchetdesigns/ts-bindgen">{"ts-bindgen"}</a>
                        {" automatically generates ergonomic wasm-bindgen rust bindings for typescript definitions. "}
                        {" Crafted thoughtfully by "}
                        <a href="https://ratchetdesigns.com">{"Ratchet Designs"}</a>
                        {"."}
                    </div>
                </div>
                <div class="main-area">
                    <div class="pane">
                        <div class="file-header">
                            <div class="title">{"Input typescript definitions (.d.ts)"}</div>
                            <button onclick={on_generate} class="top-bar-btn">{"Generate"}</button>
                        </div>
                        <CodeEditor options={Rc::clone(&self.ts_options)} link={self.ts_link.clone()}/>
                    </div>
                    <div class="separator" />
                    <div class="pane">
                        <div class="file-header">
                            <div class="title">{"Rust wasm-bindgen bindings"}</div>
                            <button onclick={on_issue} class="issue-link">{"Report issue"}</button>
                        </div>
                        <CodeEditor options={Rc::clone(&self.rust_options)} link={self.rust_link.clone()} />
                    </div>
                </div>
                <div class="footer">
                    <a href="https://www.ratchetdesigns.com">
                        {"Crafted thoughtfully by Ratchet Designs"}
                    </a>
                    <br />
                    {"\u{00a9} Ratchet Designs. All rights reserved."}
                </div>
            </>
        }
    }
}

#[wasm_bindgen(start)]
pub fn start_app() {
    yew::start_app::<App>();
}
